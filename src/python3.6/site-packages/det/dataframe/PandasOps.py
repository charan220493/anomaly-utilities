from glob import glob as _glob
from pandas import read_csv as _read_csv, DataFrame as _DataFrame, concat as _concat
from dateutil.parser import parse as _parse
from datetime import datetime as _datetime
from pandas.errors import EmptyDataError as _EmptyDataError 


#given wild card paths of data, read in each set and store in master data frame
def ReadData(paths, delim = None):
	"""
	ReadData requires list of wild card paths, read in each set and store in master data frame
	"""
	merged = _DataFrame()
	for indexa, elem in enumerate(paths):
		files = sorted(_glob(elem))
		allR, m1 = ReadFilesToDF(files, delim = delim)
		merged[indexa] = m1[0]
	return merged


#routine to find dates
def FindDate(inputa, fmt = '%Y%m%d'):
	"""
	FindDate requires data and fmt string, infers the length of date and scans through input
	to find most likely match
	"""
	#use list as return data to allow finding multiple dates in single string
	allDates = []
	#setup basic lookup for expected length of date parts
	lengthHash = {}
	lengthHash['Y'] = 4
	lengthHash['m'] = 2
	lengthHash['d'] = 2
	lengthHash['M'] = 2
	lengthHash['S'] = 2

	#character to be ignored to keep track of lengthHint
	ignore = ['-','_',':','/','\\',]
	lengthHint = 0

	#after removing unencessary format modifiers, find length of each format token then add any modifiers
	for elem in fmt.split('%'):
	  #trim any ignore characters
		for replace in ignore:
			elemNew = elem.replace(replace,'')
			lengthHint += len(elem) - len(elemNew)
			elem = elemNew
		lengthHint += lengthHash.get(elem,0)

	#iterate over string until match is found, else return None
	for elem in range(0,len(inputa)-lengthHint+1):
		z1 = inputa[elem:elem+lengthHint]
		try:
			t1 = _datetime.strptime(z1, fmt )
			allDates.append(t1)
		except ValueError:
			pass
	return allDates

def ReadFilesToDF(files, delim = None):
	"""
	ReadFilesToDF is a helper routine that takes the nominal dataframes (can be singletons)
	labels data index according to any found date index , or monotonically increasing sequence
	"""
	allR = []
	for indexa,elem in enumerate(files):
		try:
			c0 = _read_csv(elem, error_bad_lines=False, header=None, delimiter=delim, engine='python')
		except _EmptyDataError as err:
			c0 = _DataFrame()
			c0[0] = [0]
		try:
			c0['date'] = _parse(elem, fuzzy=True)
		except ValueError as err:
			dateFound = FindDate(elem)
			if len(dateFound) == 0:
				c0['date'] = indexa
			else:
				c0['date'] = dateFound[0]
		allR.append(c0)
	merged = _concat(allR, ignore_index=True)
	merged.index = merged['date']
	return allR, merged



